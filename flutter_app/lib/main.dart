// Created by Gemini - CORRECTED VERSION
import 'package:flutter/material.dart';
// ====================================================================
// THE FIX IS HERE: Corrected the import paths.
// ====================================================================
import 'package:flutter_app/src/rust/api.dart';
import 'package:flutter_app/src/rust/frb_generated.dart';
import 'package:flutter_app/widgets/chart_widget.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize the Rust library
  await RustLib.init();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real-Time Crypto Chart',
      theme: ThemeData.dark(),
      home: const ChartScreen(),
    );
  }
}

class ChartScreen extends StatefulWidget {
  const ChartScreen({super.key});

  @override
  State<ChartScreen> createState() => _ChartScreenState();
}

class _ChartScreenState extends State<ChartScreen> {
  Stream<String>? priceStream;
  String currentSymbol = "BTC/USD";
  String currentPrice = "0.0";
  bool isCsvEnabled = false;

  @override
  void initState() {
    super.initState();
    greet(name: "Flutter").then((s) => print(s));
    _subscribeToSymbol(currentSymbol);
  }

  void _subscribeToSymbol(String symbol) {
    setState(() {
      // The `subscribeToPriceUpdates` function is generated by flutter_rust_bridge
      priceStream = subscribeToPriceUpdates(symbol: symbol);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('$currentSymbol - Price: $currentPrice'),
        actions: [
          const Text('CSV:'),
          Switch(
            value: isCsvEnabled,
            onChanged: (value) {
              setState(() {
                isCsvEnabled = value;
                toggleCsvPersistence(enabled: value);
              });
            },
          ),
        ],
      ),
      body: Center(
        child: StreamBuilder<String>(
          stream: priceStream,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              // In a real app, we'd deserialize the Protobuf here
              WidgetsBinding.instance.addPostFrameCallback((_) {
                if (mounted) {
                  setState(() {
                    currentPrice = snapshot.data!;
                  });
                }
              });
              return ChartWidget(data: snapshot.data!);
            } else if (snapshot.hasError) {
              return Text('Error: ${snapshot.error}');
            }
            return const CircularProgressIndicator();
          },
        ),
      ),
    );
  }
}